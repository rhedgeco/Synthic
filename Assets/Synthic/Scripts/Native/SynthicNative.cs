// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Synthic.Native
{
    internal static unsafe partial class Lib
    {
#if UNITY_IOS && !UNITY_EDITOR
        const string __DllName = "__Internal";
#else
        const string __DllName = "synthic-44185";
#endif
        



        [DllImport(__DllName, EntryPoint = "create_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Buffer* create_buffer(nuint item_size, nuint item_align, nuint buffer_size);

        [DllImport(__DllName, EntryPoint = "dispose_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dispose_buffer(Buffer* buffer);

        [DllImport(__DllName, EntryPoint = "rebuild_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void rebuild_buffer(Buffer* buffer, nuint buffer_size);

        [DllImport(__DllName, EntryPoint = "buffer_ptr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* buffer_ptr(Buffer* buffer);

        [DllImport(__DllName, EntryPoint = "copy_to_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void copy_to_buffer(Buffer* src_buffer, Buffer* dst_buffer);

        [DllImport(__DllName, EntryPoint = "copy_to_ptr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void copy_to_ptr(Buffer* src_buffer, byte* dst_ptr, nuint dst_size);

        [DllImport(__DllName, EntryPoint = "copy_from_ptr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void copy_from_ptr(Buffer* dst_buffer, byte* src_ptr, nuint src_size);

        [DllImport(__DllName, EntryPoint = "set_buffer_values", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_buffer_values(Buffer* buffer, byte* src_ptr);

        [DllImport(__DllName, EntryPoint = "copy_to_ptr_channel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool copy_to_ptr_channel(Buffer* src_buffer, byte* dst_ptr, nuint dst_size, nuint total_channels, nuint target_channel);

        [DllImport(__DllName, EntryPoint = "map_buffer_floats", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void map_buffer_floats(Buffer* buffer, float in_min, float in_max, float out_min, float out_max);

        [DllImport(__DllName, EntryPoint = "create_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Oscillator* create_oscillator(WaveShapes mode, float max_value, float min_value, float default_amplitude, float default_frequency);

        [DllImport(__DllName, EntryPoint = "dispose_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dispose_oscillator(Oscillator* oscillator);

        [DllImport(__DllName, EntryPoint = "set_oscillator_mode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_mode(Oscillator* oscillator, WaveShapes mode);

        [DllImport(__DllName, EntryPoint = "set_oscillator_max_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_max_value(Oscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_oscillator_min_value", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_min_value(Oscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_oscillator_master_amplitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_master_amplitude(Oscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_oscillator_default_frequency", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_default_frequency(Oscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_oscillator_settings", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_oscillator_settings(Oscillator* oscillator, WaveShapes mode, float max_value, float min_value, float master_amplitude, float default_frequency);

        [DllImport(__DllName, EntryPoint = "process_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void process_oscillator(Oscillator* oscillator, Buffer* dst_buffer, Buffer* amplitude_buffer, Buffer* frequency_buffer, nuint sample_rate);

        [DllImport(__DllName, EntryPoint = "create_synth_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SynthOscillator* create_synth_oscillator(nuint voices, WaveShapes wave, float voice_pan, float voice_frequency, float voice_amplitude, float master_amplitude);

        [DllImport(__DllName, EntryPoint = "dispose_synth_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void dispose_synth_oscillator(SynthOscillator* oscillator);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_wave", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_wave(SynthOscillator* oscillator, WaveShapes value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_master_amplitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_master_amplitude(SynthOscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_voices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_voices(SynthOscillator* oscillator, nuint value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_voice_pan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_voice_pan(SynthOscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_voice_frequency", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_voice_frequency(SynthOscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_voice_amplitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_voice_amplitude(SynthOscillator* oscillator, float value);

        [DllImport(__DllName, EntryPoint = "set_synth_oscillator_settings", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_synth_oscillator_settings(SynthOscillator* oscillator, nuint voices, WaveShapes wave, float voice_pan, float voice_frequency, float voice_amplitude, float master_amplitude);

        [DllImport(__DllName, EntryPoint = "process_synth_oscillator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void process_synth_oscillator(SynthOscillator* oscillator, Buffer* left_buffer, Buffer* right_buffer, Buffer* notes_buffer, nuint sample_rate);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Buffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Oscillator
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SynthOscillator
    {
    }


    internal enum WaveShapes : int
    {
        Saw,
        Sine,
        Square,
        Triangle,
    }


}
    